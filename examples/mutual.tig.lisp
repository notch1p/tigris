;; == external FFI ==

(load "ffi.lisp")

;; == Common Lisp ==

; hoisted functions

(defun |countTree| (|payload| |k|)
  (declare (optimize (speed 3) (safety 0) (debug 0)))
  (let ((|Œ±| (car |payload|)))
    (let ((|Œì| (cdr |payload|)))
      (let ((|_pL#__?x‚ÇÄ| (car |Œ±|)))
        (cond
          ((eq (car |_pL#__?x‚ÇÄ|) '|Empty|)
            (let ((|c2| 0))
              (funcall |k| |c2|)))
          ((eq (car |_pL#__?x‚ÇÄ|) '|Node|)
            (let ((|p3| (svref (cdr |_pL#__?x‚ÇÄ|) 1)))
              (let ((|c4| 1))
                (let ((|u5| nil))
                  (let ((|pair6| (cons |p3| |u5|)))
                    (let ((|œÅ| (cons |pair6| |Œì|)))
                      (labels ((|k1| (|v0|)
                        (let ((|p8| (+ |c4| |v0|)))
                          (funcall |k| |p8|))))
                        (funcall #'|countForest| |œÅ| #'|k1|)))))))))))))

(defun |countForest| (|payload| |k|)
  (declare (optimize (speed 3) (safety 0) (debug 0)))
  (let ((|Œ±| (car |payload|)))
    (let ((|Œì| (cdr |payload|)))
      (let ((|_pL#__?x‚ÇÄ| (car |Œ±|)))
        (cond
          ((eq (car |_pL#__?x‚ÇÄ|) '|Nil|)
            (let ((|c11| 0))
              (funcall |k| |c11|)))
          ((eq (car |_pL#__?x‚ÇÄ|) '|Cons|)
            (let ((|p12| (svref (cdr |_pL#__?x‚ÇÄ|) 0)))
              (let ((|p13| (svref (cdr |_pL#__?x‚ÇÄ|) 1)))
                (let ((|u14| nil))
                  (let ((|pair15| (cons |p12| |u14|)))
                    (let ((|œÅ| (cons |pair15| |Œì|)))
                      (labels ((|k3| (|v2|)
                        (let ((|u17| nil))
                          (let ((|pair18| (cons |p13| |u17|)))
                            (let ((|œÅ| (cons |pair18| |Œì|)))
                              (labels ((|k5| (|v4|)
                                (let ((|p20| (+ |v2| |v4|)))
                                  (funcall |k| |p20|))))
                                (funcall #'|countForest| |œÅ| #'|k5|)))))))
                        (funcall #'|countTree| |œÅ| #'|k3|)))))))))))))

; entrypoint
(defun |main| (|arg| |k|)
  (declare (optimize (speed 3) (safety 0) (debug 0)))
  (let ((|Œì| (cons '|ùêÑ| (vector))))
    (let ((|countTree| (cons '|ùêÇ| (vector #'|countTree| |Œì|))))
      (let ((|c21| 1))
        (let ((|c22| 2))
          (let ((|c23| 5))
            (let ((|con24| (cons '|Nil| (vector))))
              (let ((|con25| (cons '|Node| (vector |c23| |con24|))))
                (let ((|con26| (cons '|Nil| (vector))))
                  (let ((|con27| (cons '|Cons| (vector |con25| |con26|))))
                    (let ((|con28| (cons '|Node| (vector |c22| |con27|))))
                      (let ((|c29| 3))
                        (let ((|c30| 4))
                          (let ((|con31| (cons '|Nil| (vector))))
                            (let ((|con32| (cons '|Node| (vector |c30| |con31|))))
                              (let ((|con33| (cons '|Nil| (vector))))
                                (let ((|con34| (cons '|Cons| (vector |con32| |con33|))))
                                  (let ((|con35| (cons '|Node| (vector |c29| |con34|))))
                                    (let ((|con36| (cons '|Empty| (vector))))
                                      (let ((|con37| (cons '|Nil| (vector))))
                                        (let ((|con38| (cons '|Cons| (vector |con36| |con37|))))
                                          (let ((|con39| (cons '|Cons| (vector |con35| |con38|))))
                                            (let ((|con40| (cons '|Cons| (vector |con28| |con39|))))
                                              (let ((|con41| (cons '|Node| (vector |c21| |con40|))))
                                                (let ((|u42| nil))
                                                  (let ((|pair43| (cons |con41| |u42|)))
                                                    (let ((|_code| (svref (cdr |countTree|) 0)))
                                                      (let ((|Œìc| (svref (cdr |countTree|) 1)))
                                                        (let ((|œÅc| (cons |pair43| |Œìc|)))
                                                          (funcall |_code| |œÅc| |k|))))))))))))))))))))))))))))))

; driver
(defun |__start| ()
  (format t "~A"
    (funcall #'|main| nil #'identity)))

