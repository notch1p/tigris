import Tigris.typing.types
open Pattern

namespace Exhaustive
def ùíÆ‚ÇÄ (p : Pattern) (pps : List $ List Pattern) : List $ List Pattern :=
  match p, pps with
  | PCtor c a, ((PCtor c' _) :: ps) :: pps =>
    if c == c' then
      a.foldr (¬∑ :: ¬∑) ps :: ùíÆ‚ÇÄ p pps
    else ùíÆ‚ÇÄ p pps
  | PCtor _ a, (PVar _ :: ps) :: pps
  | PCtor _ a, (PWild :: ps) :: pps =>
    let p := a.foldr (fun _ a => PWild :: a) ps
    if p matches [] then pps else p :: pps
  | _, _ => []

def ùíü‚ÇÄ (pps : List $ List Pattern) : List $ List Pattern :=
  pps.foldr (init := []) fun s a =>
    match s with
    | PWild :: ss => ss :: a
    | _ => a

def œÇcomp? (t : TyDecl) (sig : Std.HashSet (Symbol √ó Nat)) : Unit ‚äï (Symbol √ó List MLType) :=
  match t with
  | {ctors,..} =>
    Id.run do
      let mut res := true
      let mut i   := 0
      for (c, a) in ctors do
        if sig.contains (c, a.length) then i := i + 1; continue
        else res := false break
      return if res then .inl () else .inr ctors[i]!

def ctorsToPat (t : Symbol √ó Nat) := PCtor t.1 (t.2.fold (fun _ _ a => a.push PWild) #[])

def œÇ (pps : List $ List Pattern) : Std.HashSet (Symbol √ó Nat) :=
  pps.foldl (init := ‚àÖ) fun a s =>
    match s with
    | PCtor n as :: _ => a.insert (n, as.size)
    | _ => a

partial def ‚Ñê (t : TyDecl) (pps : List $ List Pattern) (i : Nat) : Option (List Pattern) :=
  if i = 0 then if pps matches [] then some [] else none
  else
    let œÇ := œÇ pps
    let œÇarr := œÇ.toArray
    match œÇcomp? t œÇ with
    | .inl () =>
      let rec go it :=
        if it = œÇarr.size then none
        else
          let p@(_, a) := œÇarr[it]!
          let res := ‚Ñê t (ùíÆ‚ÇÄ (ctorsToPat p) pps) (a + i - 1)
          if let some x := res then some x
          else go it.succ
      go 0
    | .inr ls =>
      match ‚Ñê t (ùíü‚ÇÄ pps) (i - 1) with
      | none => none
      | some xs =>
        if œÇarr.isEmpty then some $ PWild :: xs
        else
          let (a, ls) := ls
          some $ ctorsToPat (a, ls.length) :: xs

def matPeel1 (ls : List $ List Pattern) : List (List Pattern) :=
  ls.foldr (init := []) fun s a =>
    if let _ :: xs := s then
      xs :: a
    else []

def exhaust (t : Array TyDecl) (pps : List $ List Pattern) (i : Nat) : List Pattern :=
  (¬∑.1) <| t.foldl (init := ([], pps)) fun (res, pps) t =>
    if let some x := ‚Ñê t pps i then
      (res ++ x, matPeel1 pps)
    else (res, matPeel1 pps)

--open MLType TV in
--#eval
--  let ty1 : TyDecl := ‚ü®"Expr", #["a"], #[ ("Atom", [TVar $ mkTV "a"])
--                                       , ("Add", [TApp "Expr" [TVar $ mkTV "a"], TApp "Expr" [TVar $ mkTV "a"]])
--                                       , ("Sub",[TApp "Expr" [TVar $ mkTV "a"], TApp "Expr" [TVar $ mkTV "a"]])]‚ü©
--  let ty2 : TyDecl := ‚ü®"Expr", #["a"], #[ ("Atom", [TVar $ mkTV "a"])
--                                       , ("Add", [TApp "Expr" [TVar $ mkTV "a"], TApp "Expr" [TVar $ mkTV "a"]])
--                                       , ("Sub",[TApp "Expr" [TVar $ mkTV "a"], TApp "Expr" [TVar $ mkTV "a"]])]‚ü©
--  ‚Ñê ty1 [ [PCtor "Atom" #[(PVar "a")], PCtor "Add" #[(PVar "a"), (PVar "a")]]
--          , [PCtor "Add" #[(PVar "a"), (PVar "a")], PCtor "Atom" #[(PVar "a")]]] 2

end Exhaustive
